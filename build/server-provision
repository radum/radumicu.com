#!/bin/bash

# The following have been used on Ubuntu 16


# Update server software before anything else
apt-get update
apt-get upgrade

# Add a new root user
# Create a new user
useradd -c "Radu Micu" -s /bin/bash -m rmicu

# Set a password for the user
passwd rmicu

# Set timezone to UTC
rm /etc/localtime
ln -s /usr/share/zoneinfo/UTC /etc/localtime

# Check date, both bellow should return same result
date
date -u

# Use key based authentication
mkdir ~rmicu/.ssh
chmod 700 ~rmicu/.ssh
touch ~rmicu/.ssh/authorized_keys

nano ~rmicu/.ssh/authorized_keys

# Paste your SSH key - generated on your local machine

chmod 600 ~rmicu/.ssh/authorized_keys
chown -R rmicu:rmicu ~rmicu/.ssh

# Disable root account login
visudo

# Find the part that deals with User privileges and add our user there
# User privilege specification
#
# root ALL=(ALL:ALL) ALL
# rmicu ALL=(ALL:ALL) ALL

# Disable password auth and root login
nano /etc/ssh/sshd_config

# PasswordAuthentication no
# PermitRootLogin no

# Reload the ssh service
/etc/init.d/ssh reload

# Install node
sudo apt-get install -y curl
curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -
sudo apt-get install -y nodejs

# Create a user to run the node app
# With this command we’ll create a user who is not able to log in, and has a home folder under “/var/appdata/radumicu.com
sudo useradd -r -s /bin/false --home /var/appdata/radumicu.com radumicuwww

# Create the app folder
sudo mkdir -p /var/appdata/radumicu.com

# Install GIT and build essentials
sudo apt-get install -y build-essential git

# Put the app files in the folder so we can run the app

# Change file permission to the run user
sudo chown -R radumicuwww:radumicuwww /var/appdata/radumicu.com

# Create a service to run the app on every restart of the server
sudo nano /etc/systemd/system/multi-user.target.wants/radumicu.com.service

# Paset the followin in the file created above
#
# [Unit]
# Description=radumicu.com node.js app
# After=network.target
#
# [Service]
# Type=forking
# Restart=always
# StandardOutput=syslog
# StandardError=syslog
# SyslogIdentifier=radumicu.com-node-app
# User=radumicuwww
# WorkingDirectory=/var/appdata/radumicu.com/current
# Environment=NODE_ENV=production
# Environment=PORT=3000
# ExecStart=/usr/bin/pm2 -n radumicu.com start /var/appdata/radumicu.com/current/server.js
# ExecStop=/usr/bin/pm2 -n radumicu.com stop /var/appdata/radumicu.com/current/server.js
#
# [Install]
# WantedBy=multi-user.target

# Reload the systemctl service and start the app
sudo systemctl daemon-reload
sudo systemctl start radumicu.com.service
sudo systemctl stop radumicu.com.service

# Update OpenSSL and install latest NGINX so we can use HTTP2
echo "deb http://security.ubuntu.com/ubuntu wily-security main" | sudo tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get -t wily-security install -y openssl

wget http://nginx.org/keys/nginx_signing.key
sudo apt-key add nginx_signing.key

echo "deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx" | sudo tee -a /etc/apt/sources.list
echo "deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx" | sudo tee -a /etc/apt/sources.list

sudo apt-get update
sudo apt-get install nginx

# Let’s Encrypt with letsencrypt
cd ~
git clone https://github.com/letsencrypt/letsencrypt
cd letsencrypt

./letsencrypt-auto certonly --webroot --webroot-path /usr/share/nginx/html --renew-by-default --email radu@radumicu.com --text --agree-tos -d www.radumicu.com -d radumicu.com

# Configure Nginx With SSL
# We will begin by creating a new stronger Diffie-Hellman key (the default is 1024, we’ll substitute with 4096)
sudo mkdir /etc/nginx/ssl
cd /etc/nginx/ssl
sudo openssl dhparam -out dhparam.pem 4096

# Nginx config file
sudo rm /etc/nginx/conf.d/default.conf
sudo nano /etc/nginx/conf.d/radumicu.com.conf

# # Remove server identifiers to help against enumeration
# server_tokens off;
#
# # Add some protection headers for ClickJacking
# add_header X-Frame-Options DENY;
# add_header X-Content-Type-Options nosniff;
#
# # Redirect to https
# server {
#     listen 80;
#     server_name radumicu.com;
#     return 301 https://$host$request_uri;
# }
#
# # Redirect to https and remove www
# server {
#     listen 80;
#     server_name www.radumicu.com;
#     return 301 https://radumicu.com$request_uri;
# }
#
# server {
#     # Listen for HTTPS connections using http2;
#     listen       443 ssl http2;
#     server_name  radumicu.com;
#
#     # Define where to find the certificates
#     # These will be under the letsencrypt folder
#     ssl_certificate      /etc/letsencrypt/live/www.radumicu.com/fullchain.pem;
#     ssl_certificate_key  /etc/letsencrypt/live/www.radumicu.com/privkey.pem;
#
#     # Cache SSL handshakes
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_timeout  5m;
#
#     # Use our new Diffie-Hellman parameter for DHE ciphersuites, recommended 4096 bits
#     ssl_dhparam /etc/nginx/ssl/dhparam.pem;
#
#     ssl_prefer_server_ciphers   on;
#
#     # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
#     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
#
#     # ciphers chosen for forward secrecy and compatibility
#     # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
#     ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
#
#     # Define our root folder
#     root /var/appdata/radumicu.com/;
#
#     # Use gzip to save on bandwith
#     gzip on;
#     gzip_comp_level 7;
#     gzip_types text/plain text/css text/javascript application/javascript;
#     gzip_proxied any;
#
#     # Tell the browser to force HTTPS
#     add_header Strict-Transport-Security "max-age=31536000;";
#
#     # Optimise internal TCP connections
#     tcp_nopush on;
#     tcp_nodelay on;
#
#     # Add static file serving from /var/appdata/radumicu.com/public folder
#     #location /.bin/client {
#     #    sendfile on;
#     #    include /etc/nginx/mime.types;
#     #    charset utf-8;
#     #    expires 30d;
#     #}
#
#     # Proxy all other requests to our Node.js application
#     location / {
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_pass      http://0.0.0.0:3000;
#         proxy_redirect  off;
#     }
# }

# Next we need to restart our Nginx service.
sudo /etc/init.d/nginx restart

# Create a user for deploy
sudo useradd deploy
sudo passwd -l deploy

# Copy local ssh key so we to access it
sudo mkdir -p /home/deploy/.ssh/
sudo touch /home/deploy/.ssh/authorized_keys
cat {my_id_rsa}.pub >> /home/deploy/.ssh/authorized_keys
sudo chown -R deploy:deploy /home/deploy/.ssh
sudo chmod 700 /home/deploy/.ssh
sudo chmod 600 /home/deploy/.ssh/authorized_keys

# Add deploy user to node running user group
sudo usermod -a -G radumicuwww deploy
